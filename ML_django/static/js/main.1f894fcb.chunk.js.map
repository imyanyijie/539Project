{"version":3,"sources":["canvas.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","props","isPainting","userStrokeStyle","guestStrokeStyle","line","userId","v4","prevPos","offsetX","offsetY","onMouseDown","bind","onMouseMove","endPaintEvent","onSubmit","nativeEvent","this","offSetData","position","start","stop","concat","paint","currPos","strokeStyle","x","y","ctx","beginPath","moveTo","lineTo","stroke","canvas","sendPaintData","toBlob","blob","formData","FormData","append","fetch","method","headers","Accept","body","then","response","ok","console","log","json","text","result","Promise","reject","Error","width","height","getContext","lineJoin","lineCap","lineWidth","style","flexDirection","ref","background","onMouseLeave","onMouseUp","onClick","Component","App","textAlign","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f894fcb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { v4 } from 'uuid';\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.endPaintEvent = this.endPaintEvent.bind(this); \n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  isPainting = false;\n  userStrokeStyle = '#EE92C2';\n  guestStrokeStyle = '#F0C987';\n  line = [];\n  userId = v4();\n  prevPos = { offsetX: 0, offsetY: 0 };\n\n  onMouseDown({ nativeEvent }) {\n    const { offsetX, offsetY } = nativeEvent;\n    this.isPainting = true;\n    this.prevPos = { offsetX, offsetY };\n  }\n\n  onMouseMove({ nativeEvent }) {\n    if (this.isPainting) {\n      const { offsetX, offsetY } = nativeEvent;\n      const offSetData = { offsetX, offsetY };\n      this.position = {\n        start: { ...this.prevPos },\n        stop: { ...offSetData },\n      };\n      this.line = this.line.concat(this.position);\n      \n      this.paint(this.prevPos, offSetData, this.userStrokeStyle);\n    }\n  }\n\n  endPaintEvent() {\n    if (this.isPainting) {\n      this.isPainting = false;\n    //   this.sendPaintData();\n    }\n\n    // createImageBitmap(this.canvas).then(imageBitmap => \n    //     console.log(this.ctx.getImageData(0, 0, 256, 256))\n    //     // this.ctx.drawImage(imageBitmap, 50, 50)\n    // )\n\n    \n  }\n\n  paint(prevPos, currPos, strokeStyle) {\n    const { offsetX, offsetY } = currPos;\n    const { offsetX: x, offsetY: y } = prevPos;\n\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = strokeStyle;\n    this.ctx.moveTo(x, y);\n    this.ctx.lineTo(offsetX, offsetY);\n    this.ctx.stroke();\n    this.prevPos = { offsetX, offsetY };\n  }\n  onSubmit() {\n    const canvas = this.canvas;\n    // var image = canvas.toDataURL()\n        // .replace(\"image/png\", \"image/octet-stream\");\n    this.sendPaintData()\n\n  }\n  async sendPaintData() {\n    \n\n    //----------------------------------\n\n    this.canvas.toBlob(function(blob) {\n        const formData = new FormData();\n        formData.append('my-file', blob, 'filename.png');\n        // Post via axios or other transport method\n        \n        fetch('http://localhost:8000/api/draw_app/imagestore/create_image/', {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n            },\n            body: formData\n        }).then(function (response) {\n            if (!response.ok) {\n            return response.text().then(result => Promise.reject(new Error(result)));\n            }\n            console.log(response)\n            return response.json();\n        })\n    });\n    //--------------------------------------------------\n    this.line = [];\n  }\n\n  componentDidMount() {\n    this.canvas.width = 256;\n    this.canvas.height = 256;\n    this.ctx = this.canvas.getContext('2d');\n    this.ctx.lineJoin = 'round';\n    this.ctx.lineCap = 'round';\n    this.ctx.lineWidth = 3;\n  }\n\n  render() {\n    return (\n      <div style={{flexDirection:\"column\"}}>\n        <canvas\n            ref={(ref) => (this.canvas = ref)}\n            style={{ background: 'black' }}\n            onMouseDown={this.onMouseDown}\n            onMouseLeave={this.endPaintEvent}\n            onMouseUp={this.endPaintEvent}\n            onMouseMove={this.onMouseMove}\n        />\n        <button \n            // ref={(ref) => (this.canvas = ref)}\n            onClick={this.onSubmit}\n            >Submit\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Canvas;","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport Canvas from './canvas';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h3 style={{ textAlign: 'center' }}>Draw Something Below!</h3>\n        <div className=\"main\">\n          <div className=\"color-guide\">\n            {/* <h5>Color Guide</h5>\n            <div className=\"user user\">User</div>\n            <div className=\"user guest\">Guest</div> */}\n          </div>\n          <Canvas />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}